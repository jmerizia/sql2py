# This file has been generated by sql2py. DO NOT EDIT MANUALLY!

from typing import Callable, Generic, Optional, TypeVar, cast, List, TypedDict, Any, Literal, Dict
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from dataclasses import dataclass
import psycopg2

con = psycopg2.connect('dbname=test, user=test, password=asdfasdf')
con.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)


@dataclass
class users_id_email_nickname_age_is_admin_0:
    id: int
    email: str
    nickname: Optional[str]
    age: Optional[int]
    is_admin: Optional[bool]

def select_all_from_users_where_age_gt_30() -> List[users_id_email_nickname_age_is_admin_0]:
    '''
    SELECT * FROM users WHERE age > 30
    '''

    cur = con.cursor()
    cur.execute('''
SELECT * FROM users WHERE age > 30
    ''', [])
    return [users_id_email_nickname_age_is_admin_0(id=id, email=email, nickname=nickname, age=age, is_admin=is_admin) for id, email, nickname, age, is_admin in cur.fetchall()]


@dataclass
class users_id_email_age_1:
    id: int
    email: str
    age: Optional[int]

def select_id_email_age_from_users_where_email_eq_admin_at_admin_dot_asdf() -> List[users_id_email_age_1]:
    '''
    seLect id, email , age from users
    where email == 'admin@admin.asdf'
    '''

    cur = con.cursor()
    cur.execute('''
seLect id, email , age from users
where email == 'admin@admin.asdf'
    ''', [])
    return [users_id_email_age_1(id=id, email=email, age=age) for id, email, age in cur.fetchall()]


def create_table_if_not_exists_users_id_integer_not_null_email_text_is_admin_boolean() -> None:
    '''
    create table if not exists users (
        id INTEGER not null,
        email TEXT,
        is_admin boolean
    )
    '''

    cur = con.cursor()
    cur.execute('''
create table if not exists users (
    id INTEGER not null,
    email TEXT,
    is_admin boolean
)
    ''', [])
    return None


def drop_table_users() -> None:
    '''
    drop table users
    '''

    cur = con.cursor()
    cur.execute('''
drop table users
    ''', [])
    return None


T = TypeVar('T')
def first(out: List[T]) -> Optional[T]:
    if len(out) == 0:
        return None
    return out[0]
