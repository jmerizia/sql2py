# This file has been generated by sql2py. DO NOT EDIT MANUALLY!

from typing import cast, List, TypedDict, Any, Literal
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import psycopg2

con = psycopg2.connect(database='test', user='postgres', password='')
con.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)


return_type_0 = TypedDict('return_type_0', {'id': int, 'email': str, 'nickname': str, 'age': int, 'is_admin': bool})
def select_all_from_users_where_id_is_not_0_and_age_gt_30() -> return_type_0:
    '''
    select all from users where id is not 0 and age gt 30
    ---
    SQL: SELECT * FROM users WHERE id != 0 and age > 30;
    '''

    cur = con.cursor()
    cur.execute('SELECT * FROM users WHERE id != 0 and age > 30;', [])
    res: List[Any] = []
    output_names: List[str] = ['id', 'email', 'nickname', 'age', 'is_admin']
    for row in cur.fetchall():
        row_dict = dict()
        for k, v in zip(output_names, row):
            row_dict[k] = v
        res.append(row_dict)
    return cast(return_type_0, res)


return_type_1 = TypedDict('return_type_1', {'id': int, 'email': str, 'age': int})
def select_id_email_age_from_users_where_email_id_1() -> return_type_1:
    '''
    select id email age from users where email id 1
    ---
    SQL: seLect id, email , age from UserS where email == 1;
    '''

    cur = con.cursor()
    cur.execute('seLect id, email , age from UserS where email == 1;', [])
    res: List[Any] = []
    output_names: List[str] = ['id', 'email', 'age']
    for row in cur.fetchall():
        row_dict = dict()
        for k, v in zip(output_names, row):
            row_dict[k] = v
        res.append(row_dict)
    return cast(return_type_0, res)


def create_table_if_not_exists_users_id_integer_not_null_email_text_is_admin_boolean() -> None:
    '''
    create table if not exists users id INTEGER not null email TEXT is_admin boolean
    ---
    SQL: create table if not exists users ( id INTEGER not null, email TEXT, is_admin boolean );
    '''

    cur = con.cursor()
    cur.execute('create table if not exists users ( id INTEGER not null, email TEXT, is_admin boolean );', [])


def drop_table_users() -> None:
    '''
    drop table users
    ---
    SQL: drop table users;
    '''

    cur = con.cursor()
    cur.execute('drop table users;', [])


return_type_4 = TypedDict('return_type_4', {'id': int})
def insert_into_users_email_nickname_age_is_admin_values_qm_qm_qm_false_returning_id(email: str, nickname: str, age: int) -> return_type_4:
    '''
    insert_into_users_email_nickname_age_is_admin_values_qm_qm_qm_false_returning_id
    ---
    insert into users( email , nickname, age, is_admin ) values (?, ?, ?, false) returning id;
    '''

    cur = con.cursor()
    cur.execute('insert into users( email , nickname, age, is_admin ) values (?, ?, ?, false) returning id;', [email, nickname, age])
    res: List[Any] = []
    output_names: List[str] = ['id']
    for row in cur.fetchall():
        row_dict = dict()
        for k, v in zip(output_names, row):
            row_dict[k] = v
        res.append(row_dict)
    return cast(return_type_4, res)


def delete_from_users_where_email_eq_qm(email: str) -> None:
    '''
    delete from users where email eq qm
    ---
    SQL: delete FROM users where email = ?;
    '''

    cur = con.cursor()
    cur.execute('delete FROM users where email = ?;', [email])
