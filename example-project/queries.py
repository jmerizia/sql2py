# This file has been generated by SQLGood. DO NOT EDIT MANUALLY!

import sqlite3
from typing import List, TypedDict

con = sqlite3.connect(example.db)


ReturnType_select_all_users = List[TypedDict('ReturnType_select_all_users', {'id': int, 'email': str, 'nickname': str, 'age': int, 'is_admin': bool})]

def select_all_users() -> ReturnType_select_all_users:
    '''
    Select all users
    ---
    SQL: SELECT * FROM users;
    '''

    cur = con.cursor()
    cur.execute('SELECT * FROM users;', )
    res = []
    output_names = ['id', 'email', 'nickname', 'age', 'is_admin']
    for row in cur.fetchall():
        row_dict = dict()
        for k, v in zip(output_names, row):
            row_dict[k] = v
        res.append(row_dict)
    return res

ReturnType_create_a_new_user = None

def create_a_new_user(email: str, age: int) -> ReturnType_create_a_new_user:
    '''
    create a new user
    ---
    SQL: INSERT INTO users (email, age) VALUES (?, ?);
    '''

    cur = con.cursor()
    cur.execute('INSERT INTO users (email, age) VALUES (?, ?);', (email, age,))
    res = []
    output_names = []
    for row in cur.fetchall():
        row_dict = dict()
        for k, v in zip(output_names, row):
            row_dict[k] = v
        res.append(row_dict)
    return None

ReturnType_determine_if_user_is_admin = List[TypedDict('ReturnType_determine_if_user_is_admin', {'is_admin': bool})]

def determine_if_user_is_admin(in1: str) -> ReturnType_determine_if_user_is_admin:
    '''
    determine if user is admin
    ---
    SQL: SELECT is_admin FROM users WHERE id = ?;
    '''

    cur = con.cursor()
    cur.execute('SELECT is_admin FROM users WHERE id = ?;', (in1,))
    res = []
    output_names = ['is_admin']
    for row in cur.fetchall():
        row_dict = dict()
        for k, v in zip(output_names, row):
            row_dict[k] = v
        res.append(row_dict)
    return res